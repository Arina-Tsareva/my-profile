import { useEffect, useState, useRef } from "react";
import Image from "next/image";
import { motion, useInView, useAnimation } from "framer-motion";
import styles from "../styles/Moscow.module.css";
import moscow1 from "../public/images/moscow-1.jpg";
import moscow2 from "../public/images/moscow-2.jpg";
import moscow3 from "../public/images/moscow-3.jpg";
import moscow4 from "../public/images/moscow-4.jpg";
import moscow5 from "../public/images/moscow-5.jpg";

const images = [moscow1, moscow2, moscow3, moscow4, moscow5];

const Moscow = () => {
  const [currentImage, setCurrentImage] = useState<number | null>(null);

  const handleOpen = (index: number) => setCurrentImage(index);
  const handleClose = () => setCurrentImage(null);
  const handleNext = () =>
    currentImage !== null &&
    setCurrentImage((currentImage + 1) % images.length);
  const handlePrev = () =>
    currentImage !== null &&
    setCurrentImage((currentImage - 1 + images.length) % images.length);

  const paragraphs = [
    "–ü–æ—Å–ª–µ —É—á—ë–±—ã –≤ –ö–∏—Ç–∞–µ –º–Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ ‚Äî –∏ —è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–∫–æ—Ä—è—Ç—å —Å—Ç–æ–ª–∏—Ü—É. –¢–∞–∫ –Ω–∞—á–∞–ª–∞—Å—å –º–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –º–µ—á—Ç—ã. –°–ø–æ–π–ª–µ—Ä: –æ–∫–∞–∑–∞–ª–æ—Å—å, –æ–¥–Ω–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –Ω—É–∂–Ω–æ –µ—â—ë –±—ã—Ç—å —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞, –æ–ø—ã—Ç–∞ –∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏.",
    "–ù–æ —è –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –∏ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ –†–ì–°–£ –Ω–∞ –∑–∞–æ—á–Ω—É—é –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ø–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É. –ê –ø–æ—Ç–æ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—Ç–µ–ª–æ—Å—å ‚Äî –∏ –≤–æ—Ç —Ç–µ–ø–µ—Ä—å –ú–æ—Å–∫–≤–∞ ‚Äî –º–æ–π –¥–æ–º, –º–æ–π –º–∞—Ä–∞—Ñ–æ–Ω –≤ —Ä–∏—Ç–º–µ –º–µ–≥–∞–ø–æ–ª–∏—Å–∞.",
  ];

  const container = {
    hidden: {},
    show: {
      transition: {
        staggerChildren: 0.03,
        delayChildren: 0.1,
      },
    },
  };

  const wordAnimation = {
    hidden: { opacity: 0, y: 20, rotate: -5 },
    show: { opacity: 1, y: 0, rotate: 0 },
  };

  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, amount: 0.3 });
  const controls = useAnimation();

  useEffect(() => {
    if (isInView) {
      controls.start("show");
    } else {
      controls.start("hidden");
    }
  }, [isInView, controls]);

  const renderAnimatedText = (text: string, index: number) => (
    <motion.p
      key={index}
      className={styles.animatedParagraph}
      variants={container}
      initial="hidden"
      animate={controls}
    >
      {text.split(" ").map((word, i) => (
        <motion.span key={i} className={styles.word} variants={wordAnimation}>
          {word}&nbsp;
        </motion.span>
      ))}
    </motion.p>
  );

  return (
    <section className={styles.section}>
      <div className={styles.background}>
        <div className={styles.gallery}>
          {images.map((img, index) => (
            <div
              className={styles.imageContainer}
              key={index}
              onClick={() => handleOpen(index)}
            >
              <Image
                src={img}
                alt={`–ú–æ—Å–∫–≤–∞ ${index + 1}`}
                className={styles.image}
              />
            </div>
          ))}
        </div>

        <div className={styles.text} ref={ref}>
          <h2 className={styles.title}>–ñ–∏–∑–Ω—å –≤ –ú–æ—Å–∫–≤–µ</h2>
          {paragraphs.map((text, index) => renderAnimatedText(text, index))}
        </div>
      </div>

      {currentImage !== null && (
        <div className={styles.modal}>
          <button className={styles.closeButton} onClick={handleClose}>
            √ó
          </button>
          <button className={styles.navButton} onClick={handlePrev}>
            ‚Äπ
          </button>
          <div className={styles.modalContent}>
            <Image
              src={images[currentImage]}
              alt={`–ú–æ—Å–∫–≤–∞ —Ñ–æ—Ç–æ ${currentImage + 1}`}
              className={styles.image}
              placeholder="blur"
            />
          </div>
          <button className={styles.navButton} onClick={handleNext}>
            ‚Ä∫
          </button>
        </div>
      )}
      
      {/* –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ */}
      <div className={styles.marquee}>
        <div className={styles.marqueeContent}>
          üöá –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥ ‚Ä¢ üöá –¢–∞–≥–∞–Ω—Å–∫–∞—è ‚Ä¢ üöá –ö—É—Ä—Å–∫–∞—è ‚Ä¢ üöá –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è ‚Ä¢ üöá
          –ö–∏–µ–≤—Å–∫–∞—è ‚Ä¢ üöá –ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã ‚Ä¢ üöá –ê—Ä–±–∞—Ç—Å–∫–∞—è ‚Ä¢
        </div>
      </div> 
    </section>
  );
};

export default Moscow;
