import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import axios from "axios"; //–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import styles from "../styles/CommentsPage.module.css";
import { FaThumbsUp, FaThumbsDown } from "react-icons/fa";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Comment
interface Comment {
  id: string;
  author: string;
  email: string;
  image?: string;
  text: string;
  rating: number;
  createdAt: string;
  replies: Comment[]; 
  parentId?: string | null;
  liked?: boolean;
  disliked?: boolean;
}

export default function CommentsPage() {
  const { data: session } = useSession(); //—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ next-auth
  const [comments, setComments] = useState<Comment[]>([]); //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [newComment, setNewComment] = useState(""); //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const [replyText, setReplyText] = useState<{ [key: string]: string }>({}); //–æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî —Ç–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏


  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  useEffect(() => {
    const fetchComments = async () => {
      try {
        const res = await axios.get("/api/comments");
        const normalized = res.data.map((comment: Comment) => ({
          ...comment,
          replies: Array.isArray(comment.replies) ? comment.replies : [],
        }));
        setComments(normalized);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", error);
      }
    };

    fetchComments();
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleCommentSubmit = async () => {
    if (!newComment.trim()) return;
    try {
      const res = await axios.post("/api/comments", {
        text: newComment,
        rating: 0,
      });
      setComments([
        ...comments,
        {
          ...res.data,
          replies: [],
          liked: false,
          disliked: false,
        },
      ]);
      setNewComment("");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", error);
    }
  };

  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  const handleReply = async (parentId: string) => {
    const text = replyText[parentId];
    if (!text?.trim()) return;

    try {
      const res = await axios.post("/api/comments/reply", {
        parentId,
        text,
        rating: 0,
      });

      const newReply = {
        ...res.data,
        replies: [],
        liked: false,
        disliked: false,
      };

      setComments((prev) =>
        prev.map((comment) =>
          comment.id === parentId
            ? { ...comment, replies: [...(comment.replies || []), newReply] }
            : comment
        )
      );
      setReplyText((prev) => ({ ...prev, [parentId]: "" }));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", error);
    }
  };

  // –†–µ–∞–∫—Ü–∏–∏ (–ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏)
  const handleReaction = async (commentId: string, type: "like" | "dislike") => {
    setComments((prev) =>
      prev.map((comment) =>
        comment.id === commentId
          ? {
              ...comment,
              liked: type === "like",
              disliked: type === "dislike",
              rating: comment.rating + (type === "like" ? 1 : -1),
            }
          : comment
      )
    );

    try {
      await axios.post("/api/comments/like-dislike", {
        commentId,
        type,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞:", error);
    }
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.greeting}>
        –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á—É–∂–æ–π –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö üí¨
      </div>
      <h1 className={styles.title}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h1>

      <textarea
        className={styles.textarea}
        value={newComment}
        onChange={(e) => setNewComment(e.target.value)}
        placeholder="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
      />
      <button className={styles.submitButton} onClick={handleCommentSubmit}>
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
      </button>

      <div className={styles.commentsList}>
        {comments
          .filter((comment) => !comment.parentId)
          .map((comment) => (
            <div key={comment.id} className={styles.comment}>
              <div className={styles.commentHeader}>
                {comment.author}{" "}
                <span>{new Date(comment.createdAt).toLocaleString()}</span>
              </div>
              <div className={styles.commentText}>{comment.text}</div>
              <div className={styles.reactions}>
                <button
                  onClick={() => handleReaction(comment.id, "like")}
                  disabled={comment.liked || comment.disliked}
                >
                  <FaThumbsUp /> {comment.rating >= 0 ? comment.rating : 0}
                </button>
                <button
                  onClick={() => handleReaction(comment.id, "dislike")}
                  disabled={comment.liked || comment.disliked}
                >
                  <FaThumbsDown /> {comment.rating < 0 ? Math.abs(comment.rating) : 0}
                </button>
              </div>
              <div className={styles.replies}>
                {Array.isArray(comment.replies) &&
                  comment.replies.map((reply) => (
                    <div key={reply.id} className={styles.reply}>
                      <div className={styles.replyAuthor}>{reply.author}</div>
                      <div>{reply.text}</div>
                    </div>
                  ))}

                <div className={styles.replyForm}>
                  <textarea
                    className={styles.textarea}
                    placeholder="–û—Ç–≤–µ—Ç–∏—Ç—å..."
                    value={replyText[comment.id] || ""}
                    onChange={(e) =>
                      setReplyText((prev) => ({
                        ...prev,
                        [comment.id]: e.target.value,
                      }))
                    }
                  />
                  <button
                    className={styles.submitButton}
                    onClick={() => handleReply(comment.id)}
                  >
                    –û—Ç–≤–µ—Ç–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          ))}
      </div>
    </div>
  );
}
